// Code generated by mockery v2.14.0. DO NOT EDIT.

package planner

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
	planner "go.nhat.io/httpmock/planner"
)

// Planner is an autogenerated mock type for the Planner type
type Planner struct {
	mock.Mock
}

// Expect provides a mock function with given fields: e
func (_m *Planner) Expect(e planner.Expectation) {
	_m.Called(e)
}

// IsEmpty provides a mock function with given fields:
func (_m *Planner) IsEmpty() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Plan provides a mock function with given fields: req
func (_m *Planner) Plan(req *http.Request) (planner.Expectation, error) {
	ret := _m.Called(req)

	var r0 planner.Expectation
	if rf, ok := ret.Get(0).(func(*http.Request) planner.Expectation); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(planner.Expectation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remain provides a mock function with given fields:
func (_m *Planner) Remain() []planner.Expectation {
	ret := _m.Called()

	var r0 []planner.Expectation
	if rf, ok := ret.Get(0).(func() []planner.Expectation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]planner.Expectation)
		}
	}

	return r0
}

// Reset provides a mock function with given fields:
func (_m *Planner) Reset() {
	_m.Called()
}

type mockConstructorTestingTNewPlanner interface {
	mock.TestingT
	Cleanup(func())
}

// NewPlanner creates a new instance of Planner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPlanner(t mockConstructorTestingTNewPlanner) *Planner {
	mock := &Planner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
