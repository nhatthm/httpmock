// Code generated by mockery v2.14.0. DO NOT EDIT.

package planner

import (
	mock "github.com/stretchr/testify/mock"
	matcher "go.nhat.io/httpmock/matcher"

	v2 "go.nhat.io/matcher/v2"
)

// Expectation is an autogenerated mock type for the Expectation type
type Expectation struct {
	mock.Mock
}

// BodyMatcher provides a mock function with given fields:
func (_m *Expectation) BodyMatcher() *matcher.BodyMatcher {
	ret := _m.Called()

	var r0 *matcher.BodyMatcher
	if rf, ok := ret.Get(0).(func() *matcher.BodyMatcher); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*matcher.BodyMatcher)
		}
	}

	return r0
}

// Fulfilled provides a mock function with given fields:
func (_m *Expectation) Fulfilled() {
	_m.Called()
}

// FulfilledTimes provides a mock function with given fields:
func (_m *Expectation) FulfilledTimes() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// HeaderMatcher provides a mock function with given fields:
func (_m *Expectation) HeaderMatcher() matcher.HeaderMatcher {
	ret := _m.Called()

	var r0 matcher.HeaderMatcher
	if rf, ok := ret.Get(0).(func() matcher.HeaderMatcher); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(matcher.HeaderMatcher)
		}
	}

	return r0
}

// Method provides a mock function with given fields:
func (_m *Expectation) Method() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RemainTimes provides a mock function with given fields:
func (_m *Expectation) RemainTimes() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// URIMatcher provides a mock function with given fields:
func (_m *Expectation) URIMatcher() v2.Matcher {
	ret := _m.Called()

	var r0 v2.Matcher
	if rf, ok := ret.Get(0).(func() v2.Matcher); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v2.Matcher)
		}
	}

	return r0
}

type mockConstructorTestingTNewExpectation interface {
	mock.TestingT
	Cleanup(func())
}

// NewExpectation creates a new instance of Expectation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExpectation(t mockConstructorTestingTNewExpectation) *Expectation {
	mock := &Expectation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
